options {
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
}

PARSER_BEGIN(OWLCompactParser)

package edu.stanford.smi.protegex.owl.compactparser;

import com.hp.hpl.jena.ontology.OntClass;
import edu.stanford.smi.protege.model.*;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.*;
import edu.stanford.smi.protegex.owl.ui.profiles.*;
import java.io.StringReader;
import java.util.*;


public class OWLCompactParser {

    public static boolean nextCouldBeCls;
    public static boolean nextCouldBeInstance;
    public static boolean nextCouldBeSlot;
    public static RDFProperty recentHasValueProperty;
    public static String errorMessage;

    private OWLModel owlModel;

    private boolean create;


    public static void checkClass(OWLModel owlModel, String text) throws ParseException {
        reset();
        text = OWLCompactParserUtil.preprocess(owlModel, text);
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = false;
        parser.parseFile();
    }


    private void checkFeatureSupported(OntClass ontClass) throws ParseException {
        if(!ProfilesManager.isFeatureSupported(owlModel, ontClass)) {
            String label = ontClass.getLabel(null);
            if(label == null) {
                label = ontClass.getLocalName();
            }
            errorMessage = "Feature \"" + label + "\" unavailable in current language profile";
            throw generateParseException();
        }
    }


    public static void checkHasRestrictionValue(OWLModel owlModel, String text) throws ParseException {
        reset();
        text = OWLCompactParserUtil.preprocess(owlModel, text);
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = false;
        parser.OWLHasValueValue();
    }


    public static void checkValueType(OWLModel owlModel, String text) throws ParseException {
        reset();
        text = OWLCompactParserUtil.preprocessFiller(owlModel, text);
        text = OWLCompactParserUtil.preprocess(owlModel, text);
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = false;
        if(parser.DataType() == null) {
            throw new ParseException("Unknown datatype \"" + text + "\".");
        }
    }


    /*private RDFProperty getRDFProperty(String name) {
        Slot slot = ((KnowledgeBase)owlModel).getSlot(name);
        if(slot instanceof RDFProperty) {
            RDFProperty rdfSlot = (RDFProperty) slot;
            if(!rdfSlot.isAnnotationProperty()) {
                return rdfSlot;
            }
        }
        return null;
    } */


    public static RDFSClass parseCls(OWLModel owlModel, String text) throws ParseException {
        reset();
        text = OWLCompactParserUtil.preprocess(owlModel, text);
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = true;
        return parser.parseFile();
    }


    public static Object parseHasRestrictionValue(OWLModel owlModel, String text) throws ParseException {
        reset();
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = true;
        return parser.OWLHasValueValue();
    }


    public static Object parseValueType(OWLModel owlModel, String text) throws ParseException {
        reset();
        text = OWLCompactParserUtil.preprocessFiller(owlModel, text);
        text = OWLCompactParserUtil.preprocess(owlModel, text);
        OWLCompactParser parser = new OWLCompactParser(new StringReader(text));
        parser.owlModel = owlModel;
        parser.create = false;
        return parser.DataType();
    }


    private static void reset() {
        nextCouldBeCls = false;
        nextCouldBeSlot = false;
        nextCouldBeInstance = false;
        errorMessage = null;
    }
}

PARSER_END(OWLCompactParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < INTEGER_LITERAL: (["-"])?["0"-"9"] (["0"-"9"])* >
|
  < FLOATING_POINT_LITERAL:
        (["-"])?(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | (["-"])? "." (["0"-"9"])+ (<EXPONENT>)?
      | (["-"])?(["0"-"9"])+ <EXPONENT>
      | (["-"])?(["0"-"9"])+ (<EXPONENT>)?
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:

      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < XSD: "xsd:" (<LETTER>|<DIGIT>|"["|"]"|"("|")"|",")* >
|
  < ONE_OF: "owl:oneOf{" >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       ":",
       ".",
       "-",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uac00"-"\ud7a3",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


RDFSClass parseFile() :
{
    RDFSClass result;
}
{
    result=OWLUnionClass() <EOF>
    {
        return result;
    }
}


RDFSClass OWLUnionClass() :
{
    List clses = new ArrayList();
    RDFSClass cls;
}
{
    cls=OWLIntersectionClass() {clses.add(cls);} ( LOOKAHEAD(2) "|"
    cls=OWLIntersectionClass() {clses.add(cls);} )*
    {
        if(clses.size() == 1) {
            return cls;
        }
        else {
            checkFeatureSupported(OWLProfiles.Union_Classes);
            if(create) {
                return owlModel.createOWLUnionClass(clses);
            }
            else {
                return null;
            }
        }
    }
}


RDFSClass OWLIntersectionClass() :
{
    List clses = new ArrayList();
    RDFSClass cls;
}
{
    cls=OWLComplementClass() {clses.add(cls);} ( LOOKAHEAD(2) "&"
    cls=OWLComplementClass() {clses.add(cls);} )*
    {
        if(clses.size() == 1) {
            return cls;
        }
        else {
            if(create) {
                return owlModel.createOWLIntersectionClass(clses);
            }
            else {
                return null;
            }
        }
    }
}


RDFSClass OWLComplementClass() :
{
    RDFSClass cls;
}
{
    (
        ("!" cls=OWLRestrictionOrNamedClass()
            {
                checkFeatureSupported(OWLProfiles.Complement_Classes);
                if(create) {
                    return owlModel.createOWLComplementClass(cls);
                }
                else {
                    return null;
                }
            }
        )
      | cls=OWLRestrictionOrNamedClass()
    )
    {
        return cls;
    }
}


RDFSClass OWLRestrictionOrNamedClass() :
{
    RDFSClass cls;
}
{
    (
        cls=OWLEnumeratedClass()
      | cls=IDClass()
      | "(" cls=OWLUnionClass() ")"
    )
    {
        return cls;
    }
}


// An artificial concept that branches depending on whether the id is a class
// or a slot name
RDFSClass IDClass() :
{
    String id;
}
{
    id=Identifier()
    {
        Frame frame = ((KnowledgeBase)owlModel).getFrame(id);
        if(frame instanceof RDFSClass) {
            return (RDFSClass) frame;
        }
        else {
            if(frame instanceof RDFProperty && !((RDFProperty)frame).isAnnotationProperty()) {
                recentHasValueProperty = (RDFProperty) frame;
                return Restriction(recentHasValueProperty);
            }
            else {
                nextCouldBeCls = true;
                nextCouldBeSlot = true;
                errorMessage = "Class or property name expected";
                throw generateParseException();
            }
        }
    }
}


OWLRestriction Restriction(RDFProperty property) :
{
    OWLRestriction result;
}
{
    (
        result=OWLCardinalityBase(property)
      | result=OWLHasValue(property)
      | result=OWLAllValuesFrom(property)
      | result=OWLSomeValuesFrom(property)
    )
    {
        return result;
    }
}


OWLCardinalityBase OWLCardinalityBase(RDFProperty property) :
{
    OWLCardinalityBase result;
    RDFSClass valuesFromClass = null;
}
{
    (
        result=OWLMaxCardinality(property)
      | result=OWLMinCardinality(property)
      | result=OWLCardinality(property)
    )  [ valuesFromClass = OWLUnionClass() ]
    {
        if(create && valuesFromClass != null) {
            result.setValuesFrom(valuesFromClass);
        }
        return result;
    }
}


OWLMaxCardinality OWLMaxCardinality(RDFProperty slot) :
{
    int card;
}
{
    "<" card=CardinalityValue()
    {
        checkFeatureSupported(OWLProfiles.MaxCardinality_Restrictions);
        if(create) {
            return owlModel.createOWLMaxCardinality(slot, card);
        }
        else {
            return null;
        }
    }
}


OWLMinCardinality OWLMinCardinality(RDFProperty slot) :
{
    int card;
}
{
    ">" card=CardinalityValue()
    {
        checkFeatureSupported(OWLProfiles.MinCardinality_Restrictions);
        if(create) {
            return owlModel.createOWLMinCardinality(slot, card);
        }
        else {
            return null;
        }
    }
}


OWLCardinality OWLCardinality(RDFProperty slot) :
{
    int card;
}
{
    "=" card=CardinalityValue()
    {
        checkFeatureSupported(OWLProfiles.MinCardinality_Restrictions);
        checkFeatureSupported(OWLProfiles.MaxCardinality_Restrictions);
        if(create) {
            return owlModel.createOWLCardinality(slot, card);
        }
        else {
            return null;
        }
    }
}


OWLHasValue OWLHasValue(RDFProperty slot) :
{
    Object value;
}
{
    "$" value=OWLHasValueValue()
    {
        checkFeatureSupported(OWLProfiles.HasValue_Restrictions);
        if(!(slot instanceof OWLDatatypeProperty)) {
            if(OWLUtil.hasOWLDLProfile(owlModel) && (value instanceof Cls || value instanceof Slot)) {
                value = null;
            }
            if(!(value instanceof Instance)) {
                nextCouldBeInstance = true;
                if(OWLUtil.hasOWLFullProfile(owlModel)) {
                    nextCouldBeSlot = true;
                    nextCouldBeCls = true;
                    errorMessage = "Individual, class or property expected";
                }
                else {
                    errorMessage = "Individual expected (in OWL DL)";
                }
                throw generateParseException();
            }
        }
        else if(slot instanceof OWLDatatypeProperty && value instanceof Instance) {
            errorMessage = "Datatype literal expected";
            throw generateParseException();
        }
        if(create) {
            return owlModel.createOWLHasValue(slot, value);
        }
        else {
            return null;
        }
    }
}


Object OWLHasValueValueAndEOF() :
{
    Object result;
}
{
    result=OWLHasValueValue() <EOF>
    {
        return result;
    }
}


Object OWLHasValueValue() :
{
    Object result;
}
{
    (
        result=OWLHasValueValueString()
      | result=OWLHasValueValueFloat()
      | result=OWLHasValueValueInteger()
      | result=OWLHasValueValueBooleanOrInstance()
    )
    {
        return result;
    }
}


String OWLHasValueValueString() :
{
    Token token;
}
{
    token=<STRING_LITERAL>
    {
        String str = token.image;
        int len = str.length();
        return str.substring(1, len - 1);
    }
}


Float OWLHasValueValueFloat() :
{
    Token token;
}
{
    token=<FLOATING_POINT_LITERAL>
    {
        return Float.valueOf(token.image);
    }
}


Integer OWLHasValueValueInteger() :
{
    Token token;
}
{
    token=<INTEGER_LITERAL>
    {
        return Integer.valueOf(token.image);
    }
}


Object OWLHasValueValueBooleanOrInstance() :
{
    String id;
}
{
    id=Identifier()
    {
        if(id.equals("true")) {
            return Boolean.TRUE;
        }
        else
        if(id.equals("false")) {
            return Boolean.FALSE;
        }
        else {
            RDFResource instance = owlModel.getRDFResourceByNameOrBrowserText(id);
            if(instance == null) {
                nextCouldBeInstance = true;
                nextCouldBeSlot = true;
                nextCouldBeCls = true;
                errorMessage = "Instance or datatype literal expected";
                throw generateParseException();
            }
            return instance;
        }
    }
}


int CardinalityValue() :
{
    Token token;
}
{
    token=<INTEGER_LITERAL>
    {
        int value = Integer.parseInt(token.image);
        if(value >= 0) {
            return value;
        }
        else {
            throw generateParseException();
        }
    }
}


String Identifier() :
{
    Token t;
}
{
    t=<IDENTIFIER> {
        return t.image;
    }
}


RDFSClass OWLEnumeratedClass() :
{
    Collection values = new ArrayList();
    String instanceText;
}
{
    "{" (instanceText=Identifier()
    {
        Instance instance = owlModel.getRDFResourceByNameOrBrowserText(instanceText);
        if(OWLUtil.hasOWLDLProfile(owlModel) && (instance instanceof Cls || instance instanceof Slot)) {
            instance = null;
        }
        if(instance == null) {
            nextCouldBeInstance = true;
            if(OWLUtil.hasOWLFullProfile(owlModel)) {
                nextCouldBeCls = true;
                nextCouldBeSlot = true;
                errorMessage = "Name of an individual, class or property expected";
            }
            else {
                errorMessage = "Name of an individual expected (in OWL DL)";
            }
            throw generateParseException();
        }
        values.add(instance);
    }
    )* "}"
    {
        checkFeatureSupported(OWLProfiles.Enumerated_Classes);
        if(create) {
            return owlModel.createOWLEnumeratedClass(values);
        }
        else {
            return null;
        }
    }
}


OWLAllValuesFrom OWLAllValuesFrom(RDFProperty property) :
{
    RDFSClass allCls;
    Object valueType;
}
{
    "*" {
        checkFeatureSupported(OWLProfiles.AllValuesFrom_Restrictions);
    }
    (
        valueType=DataType() {
            if(valueType instanceof RDFSClass || valueType == ValueType.INSTANCE) {
                if(property instanceof OWLDatatypeProperty) {
                    errorMessage = "owl:ObjectProperty or rdf:Property expected";
                    throw generateParseException();
                }
                if(create) {
                    return owlModel.createOWLAllValuesFrom(property, (RDFSClass)valueType);
                }
                else {
                    return null;
                }
            }

            if(valueType == null) {
                errorMessage = "XML Schema datatype expected";
                throw generateParseException();
            }

            if(!(property instanceof OWLDatatypeProperty)) {
                errorMessage = "owl:DatatypeProperty expected";
                throw generateParseException();
            }
            if(create) {
                if(valueType instanceof RDFSDatatype) {
                    return owlModel.createOWLAllValuesFrom(property, (RDFSDatatype)valueType);
                }
                else {
                    return owlModel.createOWLAllValuesFrom(property, (RDFSLiteral[])valueType);
                }
            }
            else {
                return null;
            }
        }
    )
}


OWLSomeValuesFrom OWLSomeValuesFrom(RDFProperty property) :
{
    RDFSClass someCls;
    Object valueType;
}
{
    "?" {
        checkFeatureSupported(OWLProfiles.SomeValuesFrom_Restrictions);
    }
    (
        valueType=DataType() {
            if(valueType instanceof RDFSClass || valueType == ValueType.INSTANCE) {
                if(property instanceof OWLDatatypeProperty) {
                    errorMessage = "owl:ObjectProperty or rdf:Property expected";
                    throw generateParseException();
                }
                if(create) {
                    return owlModel.createOWLSomeValuesFrom(property, (RDFSClass) valueType);
                }
                else {
                    return null;
                }
            }
            else if(!(property instanceof OWLDatatypeProperty)) {
                errorMessage = "owl:DatatypeProperty expected";
                throw generateParseException();
            }
            if(valueType == null) {
                errorMessage = "XML Schema datatype expected";
                throw generateParseException();
            }
            if(create) {
                if(valueType instanceof RDFSDatatype) {
                    return owlModel.createOWLSomeValuesFrom(property, (RDFSDatatype)valueType);
                }
                else {
                    return owlModel.createOWLSomeValuesFrom(property, (RDFSLiteral[])valueType);
                }
            }
            else {
                return null;
            }
        }
    )
}


Object DataType() :
{
    RDFSLiteral[] oneOfValues = null;
    Object cl = null;
}
{
    (<ONE_OF> oneOfValues=OneOfValues())  { return oneOfValues; }
  | (token=<XSD>
        {
            int index = 3;
            while(index < token.image.length() &&
                  token.image.charAt(index) != '(' &&
                  token.image.charAt(index) != '[') {
                index++;
            }
            if(index < token.image.length()) {
                Map map = DefaultRDFSDatatype.parse(owlModel, token.image);
                String sub = token.image.substring(0, index);
                RDFSDatatype datatype = owlModel.getRDFSDatatypeByName(sub);
                if(map.isEmpty()) {
                    return datatype;
                }
                else {
                    if(create) {
                        String name = owlModel.getNextAnonymousResourceName();
                        RDFSDatatype neo = owlModel.createRDFSDatatype(name);
                        Iterator it = map.keySet().iterator();
                        while(it.hasNext()) {
                            RDFProperty property = (RDFProperty) it.next();
                            Object value = map.get(property);
                            neo.setPropertyValue(property, value);
                        }
                        return neo;
                    }
                    else {
                        return datatype;
                    }
                }
            }
            else {
                return owlModel.getRDFSDatatypeByName(token.image);
            }
        })
  | (cl=OWLComplementClass())
        {
            if(create) {
                return cl;
            }
            else {
                return ValueType.INSTANCE;
            }
        }
}


RDFSLiteral[] OneOfValues() :
{
    Collection result = new ArrayList();
    Token token = null;
    Object numberValue = null;
}
{
    (
        (token=<STRING_LITERAL>
        {
            String str = token.image;
            int len = str.length();
            result.add(owlModel.createRDFSLiteral(str.substring(1, len - 1)));
        }) |
        (numberValue=OWLHasValueValueInteger()
        {
           result.add(owlModel.createRDFSLiteral(numberValue));
        }) |
        (numberValue=OWLHasValueValueFloat()
        {
           result.add(owlModel.createRDFSLiteral(numberValue));
        })
    )* "}"  { return (RDFSLiteral[]) result.toArray(new RDFSLiteral[0]); }
}
